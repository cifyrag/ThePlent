@model List<ThePlant.EF.Models.Plant>

@{
    ViewData["Title"] = "List of Plants";
}

<h2 class="text-center mb-4">List of Plants</h2>

<div class="row mb-3">
    <div class="col">
        <a class="btn btn-primary" asp-controller="Plant" asp-action="Create">New Plant</a>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@* Add this hidden input field to make the token available for JavaScript *@
@Html.AntiForgeryToken()

@if (Model != null && Model.Any())
{
    <div class="row">
        @foreach (var plant in Model)
        {
            var imageUrl = plant.PlantImages?.FirstOrDefault()?.URL;
            var overview = plant.PlantOverviews?.FirstOrDefault()?.Description;
            var care = plant.PlantCareInstructions?.FirstOrDefault();

            // Определяем src для картинки:
            var imageSrc = !string.IsNullOrEmpty(imageUrl) && imageUrl.StartsWith("http", System.StringComparison.OrdinalIgnoreCase)
            ? imageUrl
            : Url.Content("~/images/plants/" + imageUrl);

            <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                <div class="card border-0 shadow rounded h-100">
                    @if (!string.IsNullOrEmpty(imageUrl))
                    {
                        <img src="@imageSrc"
                             alt="@plant.PlantName"
                             class="card-img-top"
                             style="height: 200px; object-fit: cover; border-radius: 8px;" />
                    }
                    else
                    {
                        <div style="height: 200px; background-color: #f8f9fa;" class="d-flex align-items-center justify-content-center rounded">
                            <span class="text-muted">No Image</span>
                        </div>
                    }

                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-center text-dark">@plant.PlantName</h5>
                        <p class="card-text text-center text-muted"><strong>Category:</strong> @plant.Category</p>
                        <p class="card-text text-center text-muted"><strong>Scientific:</strong> @plant.ScientificTitle</p>
                        <p class="card-text small text-center">
                            @if (!string.IsNullOrEmpty(overview))
                            {
                                @overview.Substring(0, Math.Min(100, overview.Length))
                                @((overview.Length > 100) ? "..." : "")
                            }
                            else
                            {
                                <em>No description available.</em>
                            }
                        </p>
                        <p class="text-center">
                            <strong>Care:</strong>
                            @if (care != null)
                            {
                                @($"{care.FrequencyRecommended}x / week")
                            }
                            else
                            {
                                <em>Not specified</em>
                            }
                        </p>

                        <div class="mt-auto">
                            <div class="d-grid gap-2">
                                <a class="btn btn-outline-info" asp-action="Edit" asp-route-id="@plant.PlantId">Edit</a>
                                <button class="btn btn-outline-danger" onclick="confirmDelete('@plant.PlantId')">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p class="text-center">No plants found.</p>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript">
        function confirmDelete(plantId) {
            Swal.fire({
                title: "Are you sure?",
                text: "This will permanently delete the plant and all its associated data (images, care instructions, overviews)! This action cannot be undone.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#dc3545",
                cancelButtonColor: "#6c757d",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    // Get the anti-forgery token from the hidden input field
                    const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    fetch('/Plant/Delete', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // The Anti-Forgery token is typically sent in the 'RequestVerificationToken' header for AJAX POST requests
                            'X-Request-Verification-Token': antiForgeryToken
                        },
                        body: JSON.stringify({ id: plantId })
                    })
                        .then(response => {
                            // Check if the response is OK, if not, parse error message
                            if (!response.ok) {
                                return response.json().then(err => {
                                    throw new Error(err.message || 'Server error.');
                                }).catch(() => { // Fallback if response is not valid JSON
                                    throw new Error('An unknown server error occurred.');
                                });
                            }
                            return response.json(); // Parse the JSON response
                        })
                        .then(data => {
                            if (data.success) {
                                Swal.fire(
                                    'Deleted!',
                                    data.message,
                                    'success'
                                ).then(() => {
                                    location.reload(); // Reload the page to show updated list
                                });
                            } else {
                                Swal.fire(
                                    'Error!',
                                    data.message,
                                    'error'
                                );
                            }
                        })
                        .catch(error => {
                            console.error('Fetch error:', error);
                            Swal.fire(
                                'Error!',
                                `Deletion failed: ${error.message}`,
                                'error'
                            );
                        });
                }
            });
        }
    </script>
}